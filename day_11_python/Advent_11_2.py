import pprint
# from collections import deque
from math import floor

with open ("dummy.txt", "r") as myfile:
    data = myfile.read().splitlines()

class Monkey:
    def __init__(self, number: int, items: list, operation, test, true_target, false_target, percent):
        self.items = items
        self.number = number
        self.operation = operation
        self.test = test
        self.true_target = true_target
        self.false_target = false_target
        self.inspected = 0
        self.percent = percent

    def throw(self):
        for index in range(len(self.items)):
            self.items[index] = self.operation(self.items[index])
            self.inspected += 1
            if(self.test(self.items[index])):
                if(monkeys[self.true_target].test(self.items[index])):
                    monkeys[self.true_target].items.append(self.items[index])
                else:
                    monkeys[self.true_target].items.append(self.items[index]%self.percent)
            else:
                monkeys[self.false_target].items.append(self.items[index])
        
        self.items = []


def factors(num):
        ps = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149] # Primes from https://primes.utm.edu/lists/small/10000.txt. Primes can also be generated by iterating through numbers and checking for factors, or by using a probabilistic test like Rabin-Miller.
        pdict = set()
        for p in ps:
                if p <= num:
                        while (num / p).is_integer():
                                pdict.add(p)
                                num /= p
                if num == 1: break
        return pdict


monkeys = list()

monkeys.extend([
Monkey(0, [factors(84),factors(72),factors(58),factors(51)], lambda x: x*3, lambda x: x%13 == 0, 1, 7, 13),
Monkey(1, [factors(88), factors(58), factors(58)], lambda x: x+8, lambda x: x%2 == 0, 7, 5, 2),
Monkey(2, [factors(93),factors(82),factors(71),factors(77),factors(83),factors(53),factors(71),factors(89)], lambda x: x*x, lambda x: x%7 == 0, 3, 4, 7),
Monkey(3, [factors(81), factors(68), factors(65), factors(81), factors(73), factors(77), factors(96)], lambda x: x+2, lambda x: x%17 == 0, 4, 6, 17),
Monkey(4, [factors(75),factors(80),factors(50),factors(73),factors(88)], lambda x: x+3, lambda x: x%5 == 0, 6, 0, 5),
Monkey(5, [factors(59),factors(72),factors(99),factors(87),factors(91),factors(81)], lambda x: x*17, lambda x: x%11 == 0, 2, 3, 11),
Monkey(6, [factors(86),factors(69)], lambda x: x+6, lambda x: x%3 == 0, 1, 0, 3),
Monkey(7, [factors(91)], lambda x: x+1, lambda x: x%19 == 0, 2, 5, 19)
])

for i in range(600):
    monkeys[0].throw()
    monkeys[1].throw()
    monkeys[2].throw()
    monkeys[3].throw()
    monkeys[4].throw()
    monkeys[5].throw()
    monkeys[6].throw()
    monkeys[7].throw()






pp = pprint.PrettyPrinter()
# pp.pprint(monkeys[0].inspected)
# pp.pprint(monkeys[1].inspected)
# pp.pprint(monkeys[2].inspected)
# pp.pprint(monkeys[3].inspected)
# pp.pprint(monkeys[4].inspected)
# pp.pprint(monkeys[5].inspected)
# pp.pprint(monkeys[6].inspected)
# pp.pprint(monkeys[7].inspected)
pp.pprint(factors(84))
# pp.pprint(monkeys[0].inspected*monkeys[1].inspected*monkeys[2].inspected*monkeys[3].inspected*monkeys[4].inspected*monkeys[5].inspected*monkeys[6].inspected*monkeys[7].inspected)

